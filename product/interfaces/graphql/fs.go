// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xdb\xb8\x13\xbf\xe7\x29\x18\xf7\x92\x02\x45\x1e\xc0\xb7\xc4\x69\xfe\x08\x1a\x17\xf9\xd7\xde\xbd\x2c\x82\x60\x4c\x8d\x65\xc2\x14\xa9\x25\x29\x27\xc2\x62\xdf\x7d\xc1\x0f\xc9\xa4\x28\xd9\xee\xad\x87\xe6\x14\xcf\xfc\xe6\x83\xf3\x2d\x26\x0c\xaa\x2d\x50\x24\x0b\x59\x55\xa8\x28\xbe\xbd\x28\x59\x34\xd4\x90\x7f\xae\x08\x21\x64\x03\x1a\x1f\xc0\xc0\xfc\x08\xb8\x07\xcd\x68\x40\x59\xd6\xb5\x03\x1a\x04\x8d\x6a\x00\x0d\xa8\x75\xcf\xf3\x58\x5d\x23\x65\x5b\x46\xc1\x30\x29\x74\x8e\x5f\x25\x7c\x2f\xc3\xf4\x0a\x38\xc2\x86\xe3\x9c\xdc\x4b\xc9\x11\x44\x50\x16\xc8\xe3\xa6\x3b\xa1\xe0\x64\x5b\xe3\x9c\xac\x8c\x62\xa2\xf4\x94\x12\xcd\x53\x81\xc2\xb0\x2d\x43\x95\xb2\x76\xa0\x97\x58\x30\xb8\x29\x95\x6c\xea\x9e\xf7\x85\x34\x1a\xca\xa3\x9a\xcf\x03\x7f\x4a\x34\x17\x8a\x0d\x7d\x75\x62\xd7\x57\xff\x5e\x5d\x59\x3f\x8f\xec\x15\xab\x6a\x8e\x5d\x5e\xdc\x8f\x0a\x85\xd1\xbf\x73\xf6\x2b\xe5\x6c\x90\xb4\x85\x14\x5b\x56\x36\xca\x3e\xe4\x77\xea\x7e\xe1\xd4\x59\x25\x07\x50\x0c\x84\xd1\x73\xf2\xd7\x10\xf5\xf6\xa7\xe7\x5d\xbf\xc6\x48\x47\xb4\xe1\xba\x33\x46\xb1\x4d\x63\xd0\xca\x06\x5b\xaf\x79\x0b\x0f\x94\xfd\x6c\xb6\x2f\x0d\x7a\x66\x77\xa8\x2e\x18\x36\xcc\xd8\xc4\x46\x7f\x71\x26\x20\x7a\x93\xff\x1b\x5a\x3c\xbe\xda\xbb\xb7\x93\xca\x3c\xa0\xa6\x8a\xd5\x36\x28\x69\x62\x8b\x98\x91\x19\xab\x6c\x16\x12\x57\xb2\x14\xf8\x44\xbd\x5e\x79\x3c\xa8\x3d\x9a\x17\x0e\x14\x17\xb2\x18\x94\x97\x42\x03\x8c\xa3\xf2\x9c\x81\xa5\x8e\xb9\xda\x37\xf3\xcc\x8d\x8e\xf9\x1d\xaa\x54\xd2\x71\xa9\x42\x30\x58\xdc\x19\xcb\x5a\xb3\x0a\x1d\xb5\xa9\x8b\x11\xea\x81\x69\xb6\xe1\xf8\xa8\x64\x35\xcf\xa8\x6b\xd9\x63\x1d\x79\x01\x06\x4b\xa9\x98\x0f\xf5\xf1\xe5\x81\xde\xfa\x56\x0e\xb5\xb7\x04\x26\x3a\x46\x54\x05\x03\x6c\xf0\xb8\x23\x4a\x1b\x8b\x25\xd4\x35\x13\x65\x5c\xa2\x3e\x71\x46\xd2\xfd\x33\x1e\x90\xcf\xd3\x07\xef\xb1\x7d\x97\xaa\x48\x8a\xda\x8f\x85\xef\xf8\xee\xe2\xd3\x37\xe1\x54\xad\x1f\xa7\x50\x28\x3a\x57\x25\x6b\x5f\x79\x5e\xe9\xc9\xe2\x89\xc6\xdc\x8b\x62\x14\x49\x5e\xf8\x8e\xfe\x24\xb6\x72\x88\x7d\xd2\x36\xfc\xee\xdf\x7e\x5c\x38\x4c\xad\x70\x85\x1c\xa9\xc1\x22\xb4\xa2\xab\x86\xc8\xa2\xab\x47\x32\x32\x08\xba\x2a\x3c\x51\x84\x91\x1b\x77\x07\x60\xdc\xcf\x7e\x46\x51\x8f\x29\xec\xbd\x0f\x4a\xbd\xe0\xb3\x6c\x81\x9b\xb6\x67\xe6\xaf\x1e\x22\x9c\xf0\x2c\x91\xfe\x0a\x4a\x30\x51\x5a\x2e\xd9\x4a\x45\xcc\x0e\x09\x6d\x94\x42\x61\x48\xed\xb5\xcc\x72\x9b\x91\xd4\xa4\xd5\x08\x33\x99\xf9\xa1\x83\xdd\xd0\xc9\xb6\x41\x81\x5b\x68\xb8\x49\x8c\x31\x8a\xdd\x06\x7a\x60\x9a\xca\x46\x18\x2c\x06\x33\xbf\x88\x18\x63\xa2\x1d\x7f\x8d\x1f\x26\xb5\x58\x31\xf1\x22\x99\x30\x7a\x2d\x57\x35\x0a\x33\x27\x8f\x5c\x82\x09\x4c\xf8\x98\x66\x52\x29\x8c\x53\x97\x1a\x5c\x78\xb2\x6b\x83\xd9\x48\xf4\xf5\x4e\xbe\x6b\x17\x7f\x17\x2a\x10\x85\xfb\x51\x3b\x3b\x04\x41\x09\x2c\x66\x27\xc3\x18\x6b\xf3\x81\x9c\xad\x3b\x75\x72\xeb\xb4\xe5\xc8\x2f\x04\x6f\xcb\x5b\xb2\x64\x1c\xf5\x9d\x28\x96\x52\xe1\x6c\x22\x09\x4e\xdb\x01\x78\x73\x52\x9d\xaf\x1e\xda\x12\x0a\x82\x6c\xd0\xab\x0f\xaf\x90\x8a\x54\xd6\xd0\xec\x74\x52\x47\xca\xe5\x18\xc0\xf0\x34\xda\x68\x23\x2b\x54\xff\x4b\x96\xb9\x67\xed\x40\x08\xe4\xf9\xd0\xe7\x92\x02\x8f\x68\x53\x65\x99\x9e\x39\xc1\xa0\xbb\x1a\xc6\xf6\x7e\x82\x76\xee\x9c\xd8\xeb\x39\x38\x5d\xb4\xb1\xbb\x28\x8c\x9f\xf7\xa7\x4d\x7e\x15\x46\xb5\x97\x9a\x74\xe0\x60\x92\xc3\x26\x1e\xe7\xfe\x68\xe1\xcd\x65\x07\x4a\x77\x4a\x04\x5d\x67\xaf\xc0\xc1\x96\xeb\xc8\x76\xcd\xf5\x44\xa0\x86\x1d\x30\x0c\xe3\xd3\x23\x1c\xd2\xa9\x79\xc1\xd0\xe4\xd1\xac\x19\xc3\x0f\x67\x51\x10\x9b\xf1\x9f\x1c\x94\x29\xfe\x84\xa5\x48\xe3\x89\x38\xbb\x65\x92\xcc\xc5\xfc\x30\x62\x15\xae\x3d\x2b\x26\x87\xb3\x76\x88\x8e\x2e\xba\xf4\xac\xd9\xa2\xed\xdb\x0b\xda\xe3\x78\xd3\x05\xbf\xfa\x33\xf0\x1b\xb6\xd9\x21\x10\xdf\x88\x59\x28\x7a\x55\x01\xbc\x03\xdd\x93\x6e\xf6\xd8\x8e\x1c\xf3\xdd\x2d\x3f\x89\x9b\xb4\x91\x49\xea\xfb\xf6\x1b\xb6\x56\x3e\xf6\xfa\xf3\x19\x3f\xcf\x86\xa5\x9b\x50\xd9\xfc\xb1\x94\xe7\xbc\xe9\x46\xfa\xb0\x11\xcc\xe4\xf3\xeb\x82\xee\x4c\x4f\xbc\x49\x4f\x6a\x30\xbb\x94\x22\xdc\x39\x9b\x62\x94\x5b\x6d\x13\xba\x27\xe3\x30\xdc\xe6\x13\x63\xfe\xcc\x7e\x3e\xb3\x9e\xfd\xa8\xb8\x07\x8d\xc9\xee\x3d\x92\xef\x2a\x2b\x38\xc1\xfc\x43\x30\x93\x9c\x62\xa3\x27\x44\x38\x8f\xab\x1a\x58\x29\x7e\x34\x1c\xb3\xda\x2e\x50\xb4\x76\x63\x76\xc2\x3a\x95\xfd\x74\xfe\x1c\xf0\x2d\x09\x1f\x0b\x0e\x5a\x47\xa7\xf5\xe4\x77\xe1\x0a\x41\xd1\xdd\x0f\xd4\x0d\xef\x56\x61\x18\x3f\x63\xfd\x15\xfc\xfc\x44\x1e\x81\xa2\xd1\x44\x3b\xe9\x42\x56\xc0\xc4\xad\xa3\x2d\x24\xb7\x57\x2e\x93\xde\x65\xdd\x94\x25\xea\xf0\xf9\x7f\x54\xe7\xad\xbe\xad\x7a\x6e\x50\xec\xf5\x2d\x31\xf9\xd8\x0c\x60\x4b\x75\x43\x04\x3f\x0c\xda\x6b\xc6\xbe\xe7\xff\x0d\xf6\xfb\x67\xe8\xec\x8d\x3f\x96\xeb\xec\x8b\x6d\xa4\xa9\x47\x15\x04\xcb\x37\x3a\xc4\xe8\xef\x06\xb5\xc9\x1d\x0b\x8c\x11\xad\x49\x74\xad\xef\xff\x05\x00\x00\xff\xff\xe7\x98\x1d\xde\xf6\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
