// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "flamingo.me/flamingo/v3/core/auth/domain"
import mock "github.com/stretchr/testify/mock"
import orderdomain "flamingo.me/flamingo-commerce/v3/order/domain"

// CustomerOrderService is an autogenerated mock type for the CustomerOrderService type
type CustomerOrderService struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *CustomerOrderService) Get(_a0 context.Context, _a1 domain.Auth) ([]*orderdomain.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*orderdomain.Order
	if rf, ok := ret.Get(0).(func(context.Context, domain.Auth) []*orderdomain.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*orderdomain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Auth) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBehaviour provides a mock function with given fields: _a0, _a1
func (_m *CustomerOrderService) GetBehaviour(_a0 context.Context, _a1 domain.Auth) (orderdomain.Behaviour, error) {
	ret := _m.Called(_a0, _a1)

	var r0 orderdomain.Behaviour
	if rf, ok := ret.Get(0).(func(context.Context, domain.Auth) orderdomain.Behaviour); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderdomain.Behaviour)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Auth) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1, _a2
func (_m *CustomerOrderService) GetByID(_a0 context.Context, _a1 domain.Auth, _a2 string) (*orderdomain.Order, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *orderdomain.Order
	if rf, ok := ret.Get(0).(func(context.Context, domain.Auth, string) *orderdomain.Order); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderdomain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Auth, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
