definitions:
  ProductAttribute:
    properties:
      code:
        description: Code is the internal attribute identifier
        type: string
      codeLabel:
        description: CodeLabel is the human readable (perhaps localized) attribute name
        type: string
      label:
        description: Label is the human readable (perhaps localized) attribute value
        type: string
      rawValue:
        description: RawValue is the untouched original value of the attribute
        type: object
      unitCode:
        description: UnitCode is the internal code of the attribute values measuring unit
        type: string
    type: object
  ProductAttributes:
    additionalProperties:
      $ref: '#/definitions/ProductAttribute'
    type: object
  ProductMedia:
    properties:
      mimeType:
        type: string
      reference:
        type: string
      title:
        type: string
      type:
        type: string
      usage:
        type: string
    type: object
  cart.AdditionalData:
    properties:
      customAttributes:
        additionalProperties:
          type: string
        description: CustomAttributes list of key values
        type: object
      reservedOrderID:
        description: ReservedOrderID is an ID already known by the Cart of the future order ID
        type: string
    type: object
  cart.Address:
    properties:
      additionalAddressLines:
        items:
          type: string
        type: array
      city:
        type: string
      company:
        type: string
      country:
        type: string
      countryCode:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middleName:
        type: string
      postCode:
        type: string
      regionCode:
        type: string
      salutation:
        type: string
      state:
        type: string
      street:
        type: string
      streetNr:
        type: string
      telephone:
        type: string
      title:
        type: string
      vat:
        type: string
    type: object
  cart.AppliedDiscount:
    properties:
      applied:
        $ref: '#/definitions/domain.Price'
        description: 'how much of the discount has been subtracted from cart price, IMPORTANT: always negative'
      campaignCode:
        description: unique code of the underlying campaign or rule e.g. "summer-campaign-2018"
        type: string
      couponCode:
        description: code of discount e.g. provided by user "summer2018"
        type: string
      isItemRelated:
        description: flag indicating if the discount is applied due to item in cart
        type: boolean
      label:
        description: readable name of discount "Super Summer Sale 2018"
        type: string
      sortOrder:
        description: indicates in which order discount have been applied, low value has been applied before high value
        type: integer
      type:
        description: to distinguish between discounts
        type: string
    type: object
  cart.AppliedGiftCard:
    properties:
      applied:
        $ref: '#/definitions/domain.Price'
        description: how much of the gift card has been subtracted from cart price
      code:
        type: string
      customAttributes:
        additionalProperties: true
        description: additional custom attributes
        type: object
      remaining:
        $ref: '#/definitions/domain.Price'
        description: how much of the gift card is still available
    type: object
  cart.Cart:
    properties:
      additionalData:
        $ref: '#/definitions/cart.AdditionalData'
        description: AdditionalData   can be used for Custom attributes
      appliedCouponCodes:
        items:
          $ref: '#/definitions/cart.CouponCode'
        type: array
      appliedGiftCards:
        description: List of applied gift cards
        items:
          $ref: '#/definitions/cart.AppliedGiftCard'
        type: array
      authenticatedUserID:
        type: string
      belongsToAuthenticatedUser:
        description: BelongsToAuthenticatedUser - false = Guest Cart true = cart from the authenticated user
        type: boolean
      billingAddress:
        $ref: '#/definitions/cart.Address'
        description: BillingAddress - the main billing address (relevant for all payments/invoices)
      defaultCurrency:
        type: string
      deliveries:
        description: Deliveries - list of desired Deliveries (or Shipments) involved in this cart
        items:
          $ref: '#/definitions/cart.Delivery'
        type: array
      entityID:
        description: EntityID is a second identifier that may be used by some backends
        type: string
      id:
        description: ID is the main identifier of the cart
        type: string
      paymentSelection:
        $ref: '#/definitions/cart.PaymentSelection'
        description: PaymentSelection - the saved PaymentSelection (saves "how" the customer want to pay)
      purchaser:
        $ref: '#/definitions/cart.Person'
        description: Purchaser - additional infos for the legal contact person in this order
      totalitems:
        description: Additional non taxable totals
        items:
          $ref: '#/definitions/cart.Totalitem'
        type: array
    type: object
  cart.CouponCode:
    properties:
      code:
        type: string
      customAttributes:
        additionalProperties: true
        description: CustomAttributes can hold additional data for coupon code - keys and values are project specific
        type: object
    type: object
  cart.Delivery:
    properties:
      cartitems:
        description: Cartitems - list of cartitems
        items:
          $ref: '#/definitions/cart.Item'
        type: array
      deliveryInfo:
        $ref: '#/definitions/cart.DeliveryInfo'
        description: DeliveryInfo - The details for this delivery - normally completed during checkout
      shippingItem:
        $ref: '#/definitions/cart.ShippingItem'
        description: "ShippingItem\t- The Shipping Costs that may be involved in this delivery"
    type: object
  cart.DeliveryInfo:
    properties:
      additionalData:
        additionalProperties:
          type: string
        description: AdditionalData  - Possibility for key value based information on the delivery - can be used flexible by each project
        type: object
      carrier:
        description: Carrier - Optional the name of the Carrier that should be responsible for executing the delivery
        type: string
      code:
        description: |-
          Code - is a project specific identifier for the Delivery - you need it for the AddToCart Request for example
          The code can follow the convention in the Readme: Type_Method_LocationType_LocationCode
        type: string
      deliveryLocation:
        $ref: '#/definitions/cart.DeliveryLocation'
        description: DeliveryLocation The target Location for the delivery
      desiredTime:
        description: DesiredTime - Optional - the desired time of the delivery
        type: string
      method:
        description: Method - The shippingmethod something that is project specific and that can mean different delivery qualities with different deliverycosts
        type: string
      workflow:
        description: Type - The Type of the Delivery - e.g. delivery or pickup - this might trigger different workflows
        type: string
    type: object
  cart.DeliveryLocation:
    properties:
      address:
        $ref: '#/definitions/cart.Address'
        description: Address -  (only relevant for type address)
      code:
        description: Code - optional identifier of this location/destination - is used in special destination Types
        type: string
      type:
        description: Type - the type of the delivery - use some of the constant defined in the package like DeliverylocationTypeAddress
        type: string
      useBillingAddress:
        description: UseBillingAddress - the address should be taken from billing (only relevant for type address)
        type: boolean
    type: object
  cart.ExistingCustomerData:
    properties:
      id:
        description: ID of the customer
        type: string
    type: object
  cart.Item:
    properties:
      additionalData:
        additionalProperties:
          type: string
        type: object
      appliedDiscounts:
        description: AppliedDiscounts contains the details about the discounts applied to this item - they can be "itemrelated" or not
        items:
          $ref: '#/definitions/cart.AppliedDiscount'
        type: array
      externalReference:
        description: |-
          ExternalReference can be used by cart service implementations to separate the representation in an external
          cart service from the unique item ID
        type: string
      id:
        description: ID of the item - needs to be unique over the whole cart
        type: string
      marketplaceCode:
        type: string
      productName:
        type: string
      qty:
        type: integer
      rowPriceGross:
        $ref: '#/definitions/domain.Price'
        description: RowPriceGross
      rowPriceNet:
        $ref: '#/definitions/domain.Price'
        description: RowPriceNet
      rowTaxes:
        description: RowPriceGross
        items:
          $ref: '#/definitions/cart.Tax'
        type: array
      singlePriceGross:
        $ref: '#/definitions/domain.Price'
        description: SinglePriceGross brutto (gross) for single product
      singlePriceNet:
        $ref: '#/definitions/domain.Price'
        description: SinglePriceNet net price for single product
      sourceID:
        description: Source Id of where the items should be initial picked - This is set by the SourcingLogic
        type: string
      variantMarketPlaceCode:
        description: VariantMarketPlaceCode is used for Configurable products
        type: string
    type: object
  cart.PaymentSelection:
    type: object
  cart.Person:
    properties:
      address:
        $ref: '#/definitions/cart.Address'
      existingCustomerData:
        $ref: '#/definitions/cart.ExistingCustomerData'
        description: ExistingCustomerData if the current purchaser is an existing customer - this contains infos about existing customer
      personalDetails:
        $ref: '#/definitions/cart.PersonalDetails'
    type: object
  cart.PersonalDetails:
    properties:
      dateOfBirth:
        type: string
      nationality:
        type: string
      passportCountry:
        type: string
      passportNumber:
        type: string
    type: object
  cart.ShippingItem:
    properties:
      appliedDiscounts:
        items:
          $ref: '#/definitions/cart.AppliedDiscount'
        type: array
      priceNet:
        $ref: '#/definitions/domain.Price'
      taxAmount:
        $ref: '#/definitions/domain.Price'
      title:
        type: string
    type: object
  cart.Tax:
    properties:
      amount:
        $ref: '#/definitions/domain.Price'
      rate:
        type: string
      type:
        type: string
    type: object
  cart.Teaser:
    properties:
      deliveryCodes:
        items:
          type: string
        type: array
      itemCount:
        type: integer
      productCount:
        type: integer
    type: object
  cart.Totalitem:
    properties:
      code:
        type: string
      price:
        $ref: '#/definitions/domain.Price'
      title:
        type: string
      type:
        type: string
    type: object
  cartResultError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  controller.APIResult:
    properties:
      error:
        $ref: '#/definitions/productResultError'
      product:
        $ref: '#/definitions/domain.BasicProduct'
      success:
        type: boolean
    type: object
  controller.CartAPIResult:
    properties:
      cartTeaser:
        $ref: '#/definitions/cart.Teaser'
      cartValidationResult:
        $ref: '#/definitions/validation.Result'
      data:
        type: object
      dataValidationInfo:
        type: object
      error:
        $ref: '#/definitions/cartResultError'
        description: Contains details if success is false
      success:
        type: boolean
    type: object
  controller.getCartResult:
    properties:
      cart:
        $ref: '#/definitions/cart.Cart'
      cartValidationResult:
        $ref: '#/definitions/validation.Result'
    type: object
  domain.BasicProduct:
    type: object
  domain.CategoryTeaser:
    properties:
      code:
        description: Code the idendifier of the Category
        type: string
      name:
        description: Name - speaking name of the category
        type: string
      path:
        description: The Path (root to leaf) for this Category - separated by "/"
        type: string
    type: object
  domain.Error:
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
    type: object
  domain.FlowActionData:
    properties:
      displayData:
        description: DisplayData holds data, normally HTML to be displayed to the user
        type: string
      formParameter:
        additionalProperties:
          $ref: '#/definitions/domain.FormField'
        type: object
      url:
        description: URL is used to pass URL data to the user if the current state needs some
        type: string
    type: object
  domain.FlowStatus:
    properties:
      action:
        description: Action to perform to proceed in the payment flow. If status is "payment_waiting_for_customer" this field contains information about what to do - e.g. "redirect" or "show_iframe"
        type: string
      actionData:
        $ref: '#/definitions/domain.FlowActionData'
      data:
        description: Data contains additional information related to the action / flow
        type: object
      error:
        $ref: '#/definitions/domain.Error'
        description: Error contains additional information in case of an error (e.g. payment failed)
      status:
        description: Status of the payment flow. E.g. "payment_completed", "payment_waiting_for_customer" or "payment_failed"
        type: string
    type: object
  domain.FormField:
    properties:
      value:
        items:
          type: string
        type: array
    type: object
  domain.LoyaltyEarningInfo:
    properties:
      default:
        $ref: '#/definitions/domain.Price'
      type:
        type: string
    type: object
  domain.LoyaltyPriceInfo:
    properties:
      context:
        $ref: '#/definitions/domain.PriceContext'
      default:
        $ref: '#/definitions/domain.Price'
      discountText:
        type: string
      discounted:
        $ref: '#/definitions/domain.Price'
      isDiscounted:
        type: boolean
      maxPointsToSpent:
        type: string
      minPointsToSpent:
        type: string
      type:
        description: Type - Name( or Type) of the Loyalty program
        type: string
    type: object
  domain.Price:
    type: object
  domain.PriceContext:
    properties:
      channelCode:
        type: string
      customerGroup:
        type: string
      locale:
        type: string
    type: object
  domain.PriceInfo:
    properties:
      activeBase:
        type: string
      activeBaseAmount:
        type: string
      activeBaseUnit:
        type: string
      campaignRules:
        items:
          type: string
        type: array
      context:
        $ref: '#/definitions/domain.PriceContext'
      default:
        $ref: '#/definitions/domain.Price'
      denyMoreDiscounts:
        type: boolean
      discountText:
        type: string
      discounted:
        $ref: '#/definitions/domain.Price'
      isDiscounted:
        type: boolean
      taxClass:
        type: string
    type: object
  domain.SimpleProduct:
    properties:
      activePrice:
        $ref: '#/definitions/domain.PriceInfo'
      attributes:
        $ref: '#/definitions/ProductAttributes'
      availablePrices:
        items:
          $ref: '#/definitions/domain.PriceInfo'
        type: array
      categories:
        items:
          $ref: '#/definitions/domain.CategoryTeaser'
        type: array
      categoryToCodeMapping:
        items:
          type: string
        type: array
      createdAt:
        type: string
      description:
        type: string
      identifier:
        type: string
      isNew:
        type: boolean
      isSaleable:
        type: boolean
      keywords:
        items:
          type: string
        type: array
      loyaltyEarnings:
        description: LoyaltyEarnings optional infos about potential loyalty earnings
        items:
          $ref: '#/definitions/domain.LoyaltyEarningInfo'
        type: array
      loyaltyPrices:
        description: LoyaltyPrices - Optional infos for products that can be paid in a loyalty program
        items:
          $ref: '#/definitions/domain.LoyaltyPriceInfo'
        type: array
      mainCategory:
        $ref: '#/definitions/domain.CategoryTeaser'
      marketPlaceCode:
        type: string
      media:
        items:
          $ref: '#/definitions/ProductMedia'
        type: array
      retailerCode:
        type: string
      retailerName:
        type: string
      retailerSku:
        type: string
      saleableFrom:
        type: string
      saleableTo:
        type: string
      shortDescription:
        type: string
      stockLevel:
        type: string
      teaser:
        $ref: '#/definitions/domain.TeaserData'
      title:
        type: string
      updatedAt:
        type: string
      visibleFrom:
        type: string
      visibleTo:
        type: string
    type: object
  domain.TeaserData:
    properties:
      marketPlaceCode:
        description: The sku that should be used to link from Teasers
        type: string
      media:
        description: Media
        items:
          $ref: '#/definitions/ProductMedia'
        type: array
      preSelectedVariantSku:
        description: PreSelectedVariantSku - might be set for configurables to give a hint to link to a variant of a configurable (That might be the case if a user filters for an attribute and in the teaser the variant with that attribute is shown)
        type: string
      shortDescription:
        type: string
      shortTitle:
        type: string
      teaserAvailablePrices:
        items:
          $ref: '#/definitions/domain.PriceInfo'
        type: array
      teaserLoyaltyEarningInfo:
        $ref: '#/definitions/domain.LoyaltyEarningInfo'
        description: TeaserLoyaltyEarning optional teaser for the loyalty earning used in grid / list view
      teaserLoyaltyPriceInfo:
        $ref: '#/definitions/domain.LoyaltyPriceInfo'
        description: TeaserLoyaltyPriceInfo - optional the Loyaltyprice that can be used for teaser (e.g. on listing views)
      teaserPrice:
        $ref: '#/definitions/domain.PriceInfo'
        description: TeaserPrice is the price that should be shown in teasers (listview)
      teaserPriceIsFromPrice:
        description: TeaserPriceIsFromPrice - is set to true in cases where a product might have different prices (e.g. configurable)
        type: boolean
      urlslug:
        type: string
    type: object
  paymentResultError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  productResultError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  validation.ItemValidationError:
    properties:
      errorMessageKey:
        type: string
      itemID:
        type: string
    type: object
  validation.Result:
    properties:
      commonErrorMessageKey:
        type: string
      hasCommonError:
        type: boolean
      itemResults:
        items:
          $ref: '#/definitions/validation.ItemValidationError'
        type: array
    type: object
info:
  contact:
    email: flamingo@aoe.com
    name: Flamingo
    url: https://gitter.im/i-love-flamingo/community#
  description: Swagger (OpenAPI) Spec of all Flamingo Commerce modules
  license:
    name: MIT
  title: Flamingo Commerce API Spec
  version: "1.0"
paths:
  /api/v1/cart:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: cleans the cart and returns the cleaned cart
      tags:
      - v1 Cart ajax API
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.getCartResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Get the current cart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/applycombinedvouchergift:
    post:
      description: Use this if you have one user input and that input can be used to either enter a voucher or a giftcart
      parameters:
      - description: the couponCode that should be applied as giftcart or voucher
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Giftcart or Voucher (autodetected)
      tags:
      - v1 Cart ajax API
  /api/v1/cart/applygiftcard:
    put:
      parameters:
      - description: the couponCode that should be applied as giftcart
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Giftcart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/applyvoucher:
    put:
      parameters:
      - description: the couponCode that should be applied
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Voucher Code
      tags:
      - v1 Cart ajax API
  /api/v1/cart/billing:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Data need to be posted as application/x-www-form-urlencoded. Valid fields are all fields in "AddressForm" type. E.g. "firstname=max&lastname=mustermann&mail=max@example.org"
      parameters:
      - description: billing form values
        in: body
        name: billingAddressForm
        required: true
        schema:
          type: primitive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: adds billing infos to cart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/delivery/{deliveryCode}:
    delete:
      parameters:
      - description: the idendifier for the delivery in the cart
        in: path
        name: deliveryCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: cleans the given delivery from the cart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/delivery/{deliveryCode}/additem:
    post:
      parameters:
      - description: the idendifier for the delivery in the cart
        in: path
        name: deliveryCode
        required: true
        type: string
      - description: the product idendifier that should be added
        in: query
        name: marketplaceCode
        required: true
        type: string
      - description: optional the product idendifier of the variant (for configurable products) that should be added
        in: query
        name: variantMarketplaceCode
        type: string
      - description: optional the qty that should be added
        in: query
        name: qty
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CartAPIResult'
            - properties:
                data:
                  $ref: '#/definitions/cart.Cart'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Add Item to cart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/removeGiftCard:
    post:
      parameters:
      - description: the couponCode that should be deleted as giftcart
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Remove Giftcart
      tags:
      - v1 Cart ajax API
  /api/v1/cart/removevoucher:
    delete:
      parameters:
      - description: the couponCode that should be applied
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Remove Voucher Code
      tags:
      - v1 Cart ajax API
  /api/v1/payment/status:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.FlowStatus'
            - properties:
                data:
                  $ref: '#/definitions/cart.Cart'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/paymentResultError'
      summary: Get the payment status of current cart (or last placed cart)
      tags:
      - v1 Payment ajax API
  /api/v1/products/{marketplacecode}:
    get:
      parameters:
      - description: the marketplace code (idendifier) for the product
        in: path
        name: marketplacecode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.APIResult'
            - properties:
                product:
                  $ref: '#/definitions/domain.SimpleProduct'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.APIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.APIResult'
      summary: Gets the requested product
      tags:
      - v1 Product API
swagger: "2.0"
tags:
- description: This Cart APIs are most suitable to be called from a browser, because they rely on the session and cookie headers.
  name: v1 Cart ajax API
- description: This Payment APIs are most suitable to be called from a browser, because they rely on the session and cookie headers.
  name: v1 Payment ajax API
- description: Product API.
  name: v1 Product API
